# License key embedding PowerShell script

param(
    [string]$ProjectPath = ".",
    [string]$LicenseConfigFile = "license.config",
    [string]$OutputFile = "LicenseConfig.cs"
)

Write-Host "Embedding license key..." -ForegroundColor Yellow

$licenseConfigPath = Join-Path $ProjectPath $LicenseConfigFile
$outputPath = Join-Path $ProjectPath $OutputFile

# Default template (no license key)
$defaultTemplate = @"
// This file is automatically generated during build.
// Do not edit manually.

namespace PDFSplitterforCopilot
{
    /// <summary>
    /// Build-time embedded license configuration
    /// </summary>
    internal static class LicenseConfig
    {
        /// <summary>
        /// Build-time embedded Syncfusion license key
        /// This value is set from license.config file during build.
        /// </summary>
        public static readonly string? EmbeddedLicenseKey = null; // Replaced during build
    }
}
"@

# Template with license key
$licenseTemplate = @"
// This file is automatically generated during build.
// Do not edit manually.

namespace PDFSplitterforCopilot
{
    /// <summary>
    /// Build-time embedded license configuration
    /// </summary>
    internal static class LicenseConfig
    {
        /// <summary>
        /// Build-time embedded Syncfusion license key
        /// This value is set from license.config file during build.
        /// </summary>
        public static readonly string? EmbeddedLicenseKey = "{0}";
    }
}
"@

try {
    # Check license.config file
    if (Test-Path $licenseConfigPath) {
        Write-Host "Found license.config file." -ForegroundColor Green
        
        # Read license key from file
        $lines = Get-Content $licenseConfigPath -Encoding UTF8
        $licenseKey = $null
        
        foreach ($line in $lines) {
            $trimmedLine = $line.Trim()
            # Use first non-empty line that doesn't start with #
            if ($trimmedLine -and !$trimmedLine.StartsWith("#")) {
                $licenseKey = $trimmedLine
                break
            }
        }
        
        if ($licenseKey) {
            Write-Host "Found valid license key. (Length: $($licenseKey.Length))" -ForegroundColor Green
            
            # Escape license key for C# string literal
            $escapedLicenseKey = $licenseKey.Replace('\', '\\').Replace('"', '\"').Replace('{', '{{').Replace('}', '}}')
            
            # Generate file content manually to avoid format string issues
            $content = @"
// This file is automatically generated during build.
// Do not edit manually.

namespace PDFSplitterforCopilot
{
    /// <summary>
    /// Build-time embedded license configuration
    /// </summary>
    internal static class LicenseConfig
    {
        /// <summary>
        /// Build-time embedded Syncfusion license key
        /// This value is set from license.config file during build.
        /// </summary>
        public static readonly string? EmbeddedLicenseKey = "$escapedLicenseKey";
    }
}
"@
            $content | Out-File -FilePath $outputPath -Encoding UTF8
            
            Write-Host "License key successfully embedded." -ForegroundColor Green
        } else {
            Write-Warning "No valid license key found in license.config file."
            $defaultTemplate | Out-File -FilePath $outputPath -Encoding UTF8
        }
    } else {
        Write-Warning "license.config file not found."
        $defaultTemplate | Out-File -FilePath $outputPath -Encoding UTF8
    }
    
    Write-Host "$OutputFile file generated." -ForegroundColor Cyan
    
} catch {
    Write-Error "Error occurred while embedding license key: $($_.Exception.Message)"
    # Use default template on error
    $defaultTemplate | Out-File -FilePath $outputPath -Encoding UTF8
    exit 1
}
